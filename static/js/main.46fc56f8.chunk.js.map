{"version":3,"sources":["components/Timer/Timer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TimerState","timer","TIME_OBJECT","hours","minutes","seconds","Timer","useState","isStoped","timerState","setTimerState","parsedTime","setParsedTime","time","setTime","stopTimer","clearInterval","getTick","SECONDS_LIMIT","MINUTES_LIMIT","useEffect","parsedHours","parsedMinutes","parsedSeconds","getParsedTime","timeClass","isPaused","playStopAction","isRunning","setInterval","className","onClick","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNA0BKA,EASDC,E,oDAlBEC,G,MAA2B,CAC7BC,MAAO,EACPC,QAAS,EACTC,QAAS,K,SAMRL,O,uBAAAA,I,yBAAAA,I,wBAAAA,M,KAWE,IAAMM,EAAkB,WAAM,MAKGC,mBAASP,EAAWQ,UALvB,mBAK1BC,EAL0B,KAKdC,EALc,OAUGH,mBAAS,IAVZ,mBAU1BI,EAV0B,KAUdC,EAVc,OAeTL,mBAASL,GAfA,mBAe1BW,EAf0B,KAepBC,EAfoB,KA2B3BC,EAAY,WACdL,EAAcV,EAAWQ,UACzBM,EAAQZ,GACRc,cAAcf,IAGZgB,EAAU,WACZH,GAAQ,SAACD,GAAuB,IACtBV,EAAyCU,EAAzCV,MAAOC,EAAkCS,EAAlCT,QAASC,EAAyBQ,EAAzBR,QAkBtB,QAhBAA,EAEca,KACVb,EAAU,EACVD,KAGAA,EAAUe,KACVf,EAAU,EACVD,KAGAA,EAxEI,KAyEJY,IAGG,CACHZ,QACAC,UACAC,eAcZe,qBAAU,WACNR,EAVkB,WAAO,IACnBT,EAAyCU,EAAzCV,MAAOC,EAAkCS,EAAlCT,QAASC,EAAyBQ,EAAzBR,QAClBgB,EAAelB,EAAQ,GAAT,WAAmBA,GAAnB,UAAgCA,GAC9CmB,EAAiBlB,EAAU,GAAX,WAAqBA,GAArB,UAAoCA,GACpDmB,EAAiBlB,EAAU,GAAX,WAAqBA,GAArB,UAAoCA,GAExD,MAAM,GAAN,OAAUgB,EAAV,YAAyBC,EAAzB,YAA0CC,GAI5BC,MACf,CAACX,IAEJ,IAAMY,EAAS,sBAAmBhB,IAAeT,EAAW0B,SAAY,qBAAuB,IACzFC,EAAkBlB,IAAeT,EAAWQ,UAC1BC,IAAeT,EAAW0B,SAAY,kBA1D1DhB,EAAcV,EAAW4B,gBACzB3B,EAAQ4B,YAAYZ,EA3CF,OAoG2D,kBAAMF,KAEvF,OAAO,yBAAKe,UAAU,SAClB,yBAAKA,UAAU,iBACX,4CAEJ,yBAAKA,UAAWL,GACXd,GAEL,yBAAKmB,UAAU,qBACX,4BAAQA,UAAU,gBAAgBC,QAASJ,GACrClB,IAAeT,EAAWQ,SAAY,QACtCC,IAAeT,EAAW0B,SAAY,WAAa,QAEzD,4BACII,UAAU,gBACVC,QAAS,kBArEjBrB,EAAcV,EAAW0B,eACzBV,cAAcf,IAqEN+B,SAAUvB,IAAeT,EAAWQ,UAAYC,IAAeT,EAAW0B,UAH9E,YCnHGO,MARf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,QCKcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.46fc56f8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport './Timer.sass';\r\n\r\ninterface ITimeObject {\r\n    seconds: number;\r\n    minutes: number;\r\n    hours: number;\r\n}\r\n\r\n/**\r\n * Constants.\r\n */\r\nconst STANDARD_INTERVAL = 1000;\r\nconst HOURS_LIMIT = 100;\r\nconst MINUTES_LIMIT = 60;\r\nconst SECONDS_LIMIT = 60;\r\nconst TIME_OBJECT: ITimeObject = {\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0\r\n}\r\n\r\n/**\r\n * Timer states.\r\n */\r\nenum TimerState {\r\n    isStoped,\r\n    isRunning,\r\n    isPaused\r\n}\r\n\r\n/**\r\n * setInterval object.\r\n */\r\nlet timer: NodeJS.Timeout;\r\n\r\nexport const Timer: React.FC = () => {\r\n\r\n    /**\r\n     * State of timer.\r\n     */\r\n    const [timerState, setTimerState] = useState(TimerState.isStoped);\r\n\r\n    /**\r\n     * Parsed time for user.\r\n     */\r\n    const [parsedTime, setParsedTime] = useState(\"\");\r\n\r\n    /**\r\n     * Time object.\r\n     */\r\n    const [time, setTime] = useState(TIME_OBJECT);\r\n\r\n    const runTimer = () => {\r\n        setTimerState(TimerState.isRunning);\r\n        timer = setInterval(getTick, STANDARD_INTERVAL);\r\n    }\r\n\r\n    const pauseTimer = () => {\r\n        setTimerState(TimerState.isPaused);\r\n        clearInterval(timer);\r\n    }\r\n\r\n    const stopTimer = () => {\r\n        setTimerState(TimerState.isStoped);\r\n        setTime(TIME_OBJECT);\r\n        clearInterval(timer);\r\n    }\r\n\r\n    const getTick = () => {\r\n        setTime((time: ITimeObject) => {\r\n            let { hours, minutes, seconds }: ITimeObject = time;\r\n     \r\n            seconds++;\r\n\r\n            if (seconds > SECONDS_LIMIT - 1) {\r\n                seconds = 0;\r\n                minutes++;\r\n            }\r\n\r\n            if (minutes > MINUTES_LIMIT - 1) {\r\n                minutes = 0;\r\n                hours++;\r\n            }\r\n\r\n            if (hours > HOURS_LIMIT) {\r\n                stopTimer();\r\n            }\r\n\r\n            return {\r\n                hours,\r\n                minutes,\r\n                seconds\r\n            }\r\n        })\r\n    }\r\n\r\n    const getParsedTime = () => {\r\n        let { hours, minutes, seconds }: ITimeObject = time;\r\n        let parsedHours = (hours < 10) ? `0${hours}` : `${hours}`,\r\n            parsedMinutes = (minutes < 10) ? `0${minutes}` : `${minutes}`,\r\n            parsedSeconds = (seconds < 10) ? `0${seconds}` : `${seconds}`\r\n\r\n        return `${parsedHours}:${parsedMinutes}:${parsedSeconds}`;\r\n    }\r\n\r\n    useEffect(() => {\r\n        setParsedTime(getParsedTime());\r\n    }, [time]);\r\n\r\n    const timeClass = `timer__time ${(timerState === TimerState.isPaused) ? 'timer__time_paused' : ''}`;\r\n    const playStopAction = (timerState === TimerState.isStoped || \r\n                            timerState === TimerState.isPaused) ? () => runTimer() : () => stopTimer()\r\n\r\n    return <div className=\"timer\">\r\n        <div className=\"timer__header\">\r\n            <h1>sceuo-timer</h1>\r\n        </div>\r\n        <div className={timeClass}>\r\n            {parsedTime}\r\n        </div>\r\n        <div className=\"timer__controller\">\r\n            <button className=\"timer__button\" onClick={playStopAction}>\r\n                {(timerState === TimerState.isStoped) ? 'Start' :\r\n                 (timerState === TimerState.isPaused) ? 'Continue' : 'Stop'}\r\n            </button>\r\n            <button\r\n                className=\"timer__button\"\r\n                onClick={() => pauseTimer()}\r\n                disabled={timerState === TimerState.isStoped || timerState === TimerState.isPaused}\r\n            >\r\n                Pause\r\n            </button>\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { Timer } from './components/Timer/Timer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Timer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}